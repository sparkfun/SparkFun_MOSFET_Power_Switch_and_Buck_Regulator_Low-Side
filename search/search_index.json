{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"arduino_examples/","title":"Arduino Examples","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using the Arduino IDE or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> </ul> <p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <p>You will need either a microcontroller's digital or PWM pin to control the N-channel MOSFET Power Switch. Let's check out a few of the examples below to get started!</p>"},{"location":"arduino_examples/#example-1-switching-a-load","title":"Example 1: Switching a Load","text":"<p>In this example, we will turn on and off a load using the N-channel MOSFET every few seconds. The load can be a solenoid, DC motor, or a 12V LED.</p>"},{"location":"arduino_examples/#parts-needed","title":"Parts Needed","text":"<p>Grab the following quantities of each part listed to build this circuit:</p> <ul> <li>1x SparkFun IoT RedBoard - ESP32 Development Board</li> <li>1x USB-C Cable</li> <li>3x SparkFun MOSFET Power Switch and Buck Regulator (Low-Side)</li> <li>1x SparkFun Mini Screwdriver</li> <li>3x M/M Jumper Wires</li> <li>1x Squirrel Cage Blower (12V)</li> <li>1x Ping Pong Ball</li> <li>1x 12V Wall Adapter Power Supply</li> </ul>"},{"location":"arduino_examples/#hardware-hookup","title":"Hardware Hookup","text":"<p>You will need to connect everything as explained earlier. For this particular example, we will use a squirrel cage blower with a motor as shown in the circuit diagram below. Of course, we are using a generic motor in the circuit diagram to represent the squirrel cage blower.</p> <p>Your setup should look similar to the image below without the power supply.</p>"},{"location":"arduino_examples/#upload-code","title":"Upload Code","text":"<p>To upload code, insert the USB cable into the IoT RedBoard - ESP32.</p> <p>Note</p> <p>This example is similar to the built-in Arduino example. From the menu, select the following: File &gt; Examples &gt; 01.Basics &gt; Blink. You will need to modify the macro (<code>LED_BUILTIN</code>) with a digital pin for your microcontroller. Note that the logic is reversed due to the transistor.</p> <p>Copy the following code and paste it in the Arduino IDE. If you have not already, select your Board (in this case, the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button.</p> <pre><code>/******************************************************************************\n  Example 1: Switching a Load\n  Modified By: Ho Yun \"Bobby\" Chan\n  SparkFun Electronics\n  Date: October 27th, 2023\n  License: MIT. See license file for more information but you can\n  basically do whatever you want with this code.\n\n  This example is based on Arduino's blink example. It has been modified\n  so that it can be used for the SparkFun IoT RedBoard - ESP32 but it can be\n  used with any Arduino that has a digital pin. The load (solenoid, DC motor,\n  or 12V LED) will toggle on and off every 5 seconds.\n\n  Users can also open the Serial Monitor at 115200 to check on\n  the status of the load for debugging.\n\n  Feel like supporting open source hardware?\n  Buy a board or component from SparkFun!\n\n      SparkFun IoT RedBoard - ESP32 Development Board:            https://www.sparkfun.com/products/19177\n      SparkFun MOSFET Power Switch and Buck Regulator (Low-Side): https://www.sparkfun.com/products/23979\n      Solenoid - 12V (Latch / Lock):                              https://www.sparkfun.com/products/15324\n      Hobby Motor - Gear:                                         https://www.sparkfun.com/products/11696\n      Blower - Squirrel Cage (12V):                               https://www.sparkfun.com/products/11270\n      12V LED RGB Strip - Bare (1m):                              https://www.sparkfun.com/products/12021\n      Wall Adapter 12V/600mA, (Barrel Jack):                      https://www.sparkfun.com/products/15313\n\n  Distributed as-is; no warranty is given.\n******************************************************************************/\n\n//define a pin for the load, you'll need to adjust this\n//depending on the microcontroller that you using\nconst int loadPin = 25;\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n\n  //Initialize Serial for Debugging if there is no built-in LED\n  Serial.begin(115200);\n  Serial.println(\"Toggling a Load!\");\n\n  // initialize digital pin as an output.\n  pinMode(loadPin, OUTPUT);\n  digitalWrite(loadPin, HIGH);  // turn the LOAD off (HIGH is the voltage level)\n  Serial.println(\"OFF\");\n\n}  //END SETUP\n\n\n\n// the loop function runs over and over again forever\nvoid loop() {\n\n  digitalWrite(loadPin, LOW);  // turn the LOAD ON (LOW is the voltage level)\n  Serial.println(\"ON\");\n  delay(5000);  // wait for a few seconds\n\n  digitalWrite(loadPin, HIGH);  // turn the LOAD OFF by making the voltage HIGH\n  Serial.println(\"OFF\");\n  delay(5000);  // wait for a few seconds\n\n}  //END LOOP\n</code></pre>"},{"location":"arduino_examples/#what-you-should-see","title":"What You Should See","text":"<p>Once the code has uploaded, Once the code has uploaded, disconnect the USB cable from the IoT RedBoard - ESP32. Then insert the barrel jack from a power supply to the MOSFET Power Switch and Buck Regulator's barrel jack connector. In this case, we used a 12V wall adapter power supply.</p> <p>The load will be powered on for 5 seconds before turning back off for another 5 seconds. Compared to the original blink example, the delay is longer to allow enough time for the load to turn on. This will loop forever until you remove power. If necessary, disconnect the 3.3V jumper wire from the IoT RedBoard - ESP32, reconnect the USB cable, and open the Arduino Serial Monitor at 115200 baud for debugging purposes.</p> <p>Try adjusting the delay or even adding a Qwiic sensor with some code to trigger a load!</p>"},{"location":"arduino_examples/#example-2-toggling-a-load-with-a-button","title":"Example 2: Toggling a Load with a Button","text":"<p>In this example, we will turn on and off a load using the N-channel MOSFET with a button press. The load can be a solenoid, DC motor, or a 12V LED.</p>"},{"location":"arduino_examples/#parts-needed_1","title":"Parts Needed","text":"<p>Grab the following quantities of each part listed to build this circuit:</p> <ul> <li>1x SparkFun IoT RedBoard - ESP32 Development Board</li> <li>1x USB-C Cable</li> <li>3x SparkFun MOSFET Power Switch and Buck Regulator (Low-Side)</li> <li>1x SparkFun Mini Screwdriver</li> <li>7x M/M Jumper Wires</li> <li>1x Mini Breadboard</li> <li>1x Momentary Push Button</li> <li>1x Latching Solenoid (12V)</li> <li>1x 12V Wall Adapter Power Supply</li> </ul>"},{"location":"arduino_examples/#hardware-hookup_1","title":"Hardware Hookup","text":"<p>You will need to connect everything as explained earlier (with the exception of the momentary push button). For this particular example, we will use a latching solenoid and add a momentary pushbutton as shown in the circuit diagram below.</p> <p>Your setup should look similar to the image below without the power supply.</p>"},{"location":"arduino_examples/#upload-code_1","title":"Upload Code","text":"<p>To upload code, insert the USB cable into the IoT RedBoard - ESP32.</p> <p>Copy the following code and paste it in the Arduino IDE. If you have not already, select your Board (in this case, the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button.</p> <pre><code>/******************************************************************************\n  Example 2: Toggling a Load with a Button\n  Written By: Ho Yun \"Bobby\" Chan\n  SparkFun Electronics\n  Date: October 27th, 2023\n  License: MIT. See license file for more information but you can\n  basically do whatever you want with this code.\n\n  This example toggles the load (solenoid, DC motor, or 12V LED)\n  based on a button press. The status LED will light up at the\n  same time. This example checks to see if the momentary button\n  is still being pressed and will only toggle the load when the\n  button after releasing and pressing down on the button again.\n\n  The example was tested on the SparkFun IoT RedBoard - ESP32.\n  However, it can be used with any Arduino that has a digital pin.\n  Users can also open the Serial Monitor at 115200 to check on\n  the status of the button for debugging.\n\n  Feel like supporting open source hardware?\n  Buy a board or component from SparkFun!\n\n      SparkFun MOSFET Power Switch and Buck Regulator (Low-Side): https://www.sparkfun.com/products/23979\n      SparkFun IoT RedBoard - ESP32 Development Board:            https://www.sparkfun.com/products/19177\n      Solenoid - 12V (Latch / Lock):                              https://www.sparkfun.com/products/15324\n      Hobby Motor - Gear:                                         https://www.sparkfun.com/products/11696\n      Blower - Squirrel Cage (12V):                               https://www.sparkfun.com/products/11270\n      12V LED RGB Strip - Bare (1m):                              https://www.sparkfun.com/products/12021\n      Wall Adapter 12V/600mA, (Barrel Jack):                      https://www.sparkfun.com/products/15313\n\n  Distributed as-is; no warranty is given.\n******************************************************************************/\n\n// pushbutton 1 pin\nconst int button1Pin = 4;\nboolean button1State = false;\nboolean prevbutton1State = false;\nboolean currentbutton1State = false;\n\n//define a pin for the load, you'll need to adjust this\n//depending on the microcontroller that you using\nconst int loadPin = 25;\nboolean mode = false;  //mode to toggle load, set to off at the start\n\nconst int ledPin = 18;  // built-in LED pin for IoT RedBoard - ESP32\n                        /*Note: Users can also use the macro LED_BUILTIN. Just make sure to comment the line above\n                        and replace \"ledPIN\" with \"LEDBUILTIN\"*/\n\n\n\nvoid setup() {\n\n  //Initialize Serial for Debugging if there is no built-in LED\n  Serial.begin(115200);\n  Serial.println(\"Toggling a Load with a Button!\");\n\n  // Set up the pushbutton pin to be an input with a pull-up resistor:\n  pinMode(button1Pin, INPUT_PULLUP);\n\n  // Set up the load pin to be an output and turn it off:\n  pinMode(loadPin, OUTPUT);\n  digitalWrite(loadPin, HIGH);\n\n  //Set up built-in LED as an OUTPUT and ensure that it is off as well:\n  pinMode(ledPin, OUTPUT);\n  digitalWrite(ledPin, LOW);\n\n  Serial.println(\"OFF\");\n\n}  //END SETUP\n\n\n\nvoid loop() {\n\n  button1State = digitalRead(button1Pin);\n\n  //if button is pressed, it will be pulled low\n  if (button1State == LOW) {\n    currentbutton1State = true;  // button has been pressed once\n\n    if (prevbutton1State != currentbutton1State) {  //check to see if button is still being pressed\n\n      if (mode == false) {\n        mode = true;\n      } else {\n        mode = false;\n      }\n\n      if (mode == true) {\n\n        digitalWrite(loadPin, LOW);\n        digitalWrite(ledPin, HIGH);\n        Serial.println(\"ON\");\n\n      } else {\n\n        digitalWrite(loadPin, HIGH);\n        digitalWrite(ledPin, LOW);\n        Serial.println(\"OFF\");\n      }\n\n      delay(500);  //add small delay, you may need to have a bigger delay for button debouncing\n\n    } else {  //do nothing because finger is still on button\n    }\n\n\n\n    prevbutton1State = currentbutton1State;  //update button1 state\n  }\n  //button has not been pressed, it will be high\n  else {\n\n    currentbutton1State = false;\n    prevbutton1State = currentbutton1State;  //update button1 state\n  }\n\n\n\n}  //END LOOP\n</code></pre>"},{"location":"arduino_examples/#what-you-should-see_1","title":"What You Should See","text":"<p>Once the code has uploaded, disconnect the USB cable from the IoT RedBoard - ESP32. Then insert the barrel jack from a power supply to the MOSFET Power Switch and Buck Regulator's barrel jack connector. In this case, we used a 12V wall adapter power supply.</p> <p>The load will be powered on as soon as the button is pressed. Releasing and pressing the button again will turn the load off. The built-in LED will light up every time the load is turned on. Of course, there is also a built-in LED on the MOSFET Power Switch and Buck Regulator that will light up whenever power is applied to the load as well. If necessary, disconnect the 3.3V jumper wire from the IoT RedBoard - ESP32, reconnect the USB cable, and open the Arduino Serial Monitor at 115200 baud for debugging purposes.</p> <p>Even though this example used a button to toggle a latching solenoid, you can also use this example to control a DC motor or 12V LED! You can also try using the Qwiic RFID with an RFID tag instead of a button to turn the solenoid on. Just make sure to adjust the example code should you decide to use something else other than a button to contorl your load.</p>"},{"location":"arduino_examples/#example-3-fading","title":"Example 3: Fading","text":"<p>In this example, we will slowly turn on the load and then slowly turn it off using the N-channel MOSFET. This example is better with a DC motor and 12V LED. You will typically want the solenoid to be fully turned on/off.</p>"},{"location":"arduino_examples/#parts-needed_2","title":"Parts Needed","text":"<p>Grab the following quantities of each part listed to build this circuit:</p> <ul> <li>1x SparkFun IoT RedBoard - ESP32 Development Board</li> <li>1x USB-C Cable</li> <li>3x SparkFun MOSFET Power Switch and Buck Regulator (Low-Side)</li> <li>1x SparkFun Mini Screwdriver</li> <li>3x M/M Jumper Wires</li> <li>1x 12V RGB LED Strip</li> <li>1x 12V Wall Adapter Power Supply</li> </ul>"},{"location":"arduino_examples/#hardware-hookup_2","title":"Hardware Hookup","text":"<p>You will need to connect everything as explained earlier. For this particular example, we will use one channel from a 12V RGB LED strip as shown in the circuit diagram below.</p> <p>Note</p> <p>Notice that we are using pin 16 to fade the red channel instead of pin 25 on the IoT RedBoard - ESP32.</p> <p>Your setup should look similar to the image below without the power supply.</p>"},{"location":"arduino_examples/#upload-code_2","title":"Upload Code","text":"<p>To upload code, insert the USB cable into the IoT RedBoard - ESP32.</p> <p>Note</p> <p>This example is similar to the built-in Arduino example. From the menu, select the following: File &gt; Examples &gt; 03.Analog &gt; Fading. You will need to modify the defined pin with a PWM pin for your microcontroller. Note that the logic is reversed due to the transistor.</p> <p>Copy the following code and paste it in the Arduino IDE. If you have not already, select your Board (in this case, the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button.</p> <pre><code>/******************************************************************************\n      Example 3: Fading\n      Modified By: Ho Yun \"Bobby\" Chan\n      SparkFun Electronics\n      Date: October 27th, 2023\n      License: MIT. See license file for more information but you can\n      basically do whatever you want with this code.\n\n      This example is based on Arduino's fade example. It has been modified\n      so that it can be used for the SparkFun IoT RedBoard- ESP32 but it can be\n      used with any Arduino that has a PWM pin. The load (DC motor,\n      or 12V LED) will slowly turn on and off. This code will be more useful for\n      users connecting a DC motor or nonaddressable LED so that you can partially\n      turn on/off the load.\n\n      Users can also open the Serial Monitor at 115200 to check on\n      the status of the button for debugging.\n\n      Feel like supporting open source hardware?\n      Buy a board or component from SparkFun!\n\n          SparkFun MOSFET Power Switch and Buck Regulator (Low-Side): https://www.sparkfun.com/products/23979\n          SparkFun IoT RedBoard - ESP32 Development Board:            https://www.sparkfun.com/products/19177\n          Hobby Motor - Gear:                                         https://www.sparkfun.com/products/11696\n          Blower - Squirrel Cage (12V):                               https://www.sparkfun.com/products/11270\n          12V LED RGB Strip - Bare (1m):                              https://www.sparkfun.com/products/12021\n          Wall Adapter 12V/600mA, (Barrel Jack):                      https://www.sparkfun.com/products/15313\n\n      Distributed as-is; no warranty is given.\n    ******************************************************************************/\n\nint loadPin = 16;\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n\n  //Initialize Serial for Debugging if there is no built-in LED\n  Serial.begin(115200);\n  Serial.println(\"Analog fade in and out to slowly turn on/off load!\");\n\n  // Set up the load pin to be an output and turn it off:\n  pinMode(loadPin, OUTPUT);\n  analogWrite(loadPin, 255);\n\n  Serial.println(\"OFF\");\n\n}  //END SETUP\n\n\n\n// the loop function runs over and over again forever\nvoid loop() {\n\n  Serial.println(\"&lt;===== FADE IN =====&gt;\");\n  // fade in from min to max in increments of 5 points:\n  for (int fadeValue = 255; fadeValue &gt;= 0; fadeValue -= 5) {\n    // sets the value (range from 0 to 255):\n    analogWrite(loadPin, fadeValue);\n    // wait for 30 milliseconds to see the dimming effect\n    delay(30);\n\n    Serial.println(fadeValue);\n  }\n\n  Serial.println(\"&lt;===== FADE OUT =====&gt;\");\n  // fade out from max to min in increments of 5 points:\n  for (int fadeValue = 0; fadeValue &lt;= 255; fadeValue += 5) {\n    // sets the value (range from 0 to 255):\n    analogWrite(loadPin, fadeValue);\n    // wait for 30 milliseconds to see the dimming effect\n    delay(30);\n\n    Serial.println(fadeValue);\n  }\n\n}  //END LOOP\n</code></pre>"},{"location":"arduino_examples/#what-you-should-see_2","title":"What You Should See","text":"<p>Once the code has uploaded, disconnect the USB cable from the IoT RedBoard - ESP32. Then insert the barrel jack from a power supply to the MOSFET Power Switch and Buck Regulator's barrel jack connector. In this case, we used a 12V wall adapter power supply.</p> <p>The load will slowly turn on and slowly turn off. This will loop forever until power is removed from the board. If necessary, disconnect the 3.3V jumper wire from the IoT RedBoard - ESP32, reconnect the USB cable, and open the Arduino Serial Monitor at 115200 baud for debugging purposes.</p> <p>While this example was used to turn on one channel of a 12V RGB LED strip, you could also use this example with a DC motor. Try using a potentiometer (or any 3.3V analog sensor) with the <code>map()</code> function to adjust the speed of the motor.</p>"},{"location":"arduino_examples/#example-4-12v-rgb-led-strip","title":"Example 4: 12V RGB LED Strip","text":"<p>In this example, we will control all three channels of the RGB LED strip. Since we've already hooked up a 12V RGB LED strip before, we will also a circuit with a potentiometer to cycle between each color and a photoresistor to turn on the LEDs whenever the light is below a certain light level. The following example code is based on the SparkFun Inventor's Kit v4.1 Night Light example.</p> <ul> <li> <p> </p> <p> Non-Addressable RGB LED Strip Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Inventor's Kit Experiment Guide - v4.1 | Circuit 1D: RGB Night-Light </p> </li> </ul>"},{"location":"arduino_examples/#parts-needed_3","title":"Parts Needed","text":"<p>Grab the following quantities of each part listed to build this circuit:</p> <ul> <li>1x SparkFun IoT RedBoard - ESP32 Development Board</li> <li>1x USB-C Cable</li> <li>3x SparkFun MOSFET Power Switch and Buck Regulator (Low-Side)</li> <li>1x SparkFun Mini Screwdriver</li> <li>19x M/M Jumper Wires*</li> <li>1x Breadboard</li> <li>1x 10k\u03a9 Potentiometer with Knob</li> <li>1x Mini Photocell</li> <li>1x 10k\u03a9 Resistor</li> <li>1x 12V RGB LED Strip</li> <li>1x DC Barrel Jack Adapter - Male</li> <li>3x DC Barrel Jack Adapter - Female</li> <li>1x 12V Wall Adapter</li> </ul> <p>* Note</p> <p>You will need a minimum of 19x M/M jumper wires. Six jumper wires were stripped wires that connect the barrel jacks together for power and reference ground.</p>"},{"location":"arduino_examples/#hardware-hookup_3","title":"Hardware Hookup","text":"<p>For this particular example, we will use three channels from a 12V RGB LED strip while also including a similar circuit from the SparkFun Inventor's Kit v4.1. The circuit diagram is shown below.</p> <p>Note</p> <p>When testing the non-addressable LED strip, the pin labeled \"G\" was actually blue and the \"B\" was actually green. Depending on the manufacturer, the label may vary. Try testing the LED strip out with a power supply to determine if the letter represents the color.</p> <p>Keep in mind that instead of the RedBoard with ATmega328P, we are using the IoT RedBoard with ESP32. Since the hardware is different, the following code was modified:</p> <pre><code>- analog and PWM pins were redefined in the example code\n- threshold was modified due to the ADC's higher resolution\n- logic is reversed due to the transistors\n</code></pre> <p>Danger</p> <p>The IoT RedBoard with ESP32 has a system voltage of 3.3V. Thus, the logic levels is 3.3V instead of 5V on the RedBoard with ATmega328P. Thus, the analog reference voltage for the potentiometer and photoresistor is 3.3V. Make sure you are using 3.3V!</p> <p>Your setup should look similar to the image below without the power supply.</p>"},{"location":"arduino_examples/#upload-code_3","title":"Upload Code","text":"<p>To upload code, insert the USB cable into the IoT RedBoard - ESP32.</p> <p>Copy the following code and paste it in the Arduino IDE. If you have not already, select your Board (in this case, the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button.</p> <pre><code>/*\n  12V RGB LED Nightlight Example\n\n  Turns an 12V RGB strip LED on or off based on the light level read by a photoresistor.\n  Change colors by turning the potentiometer. This example is based off the SparkFun\n  Inventor's Kit v4.2 RGB Night-Light Example:\n\n      https://learn.sparkfun.com/tutorials/sparkfun-inventors-kit-experiment-guide---v41\n\n  Note that instead of the RedBoard with ATmega328P, we are using the IoT RedBoard with ESP32.\n  Since the hardware is different, the following code was modified:\n\n      - analog and PWM pins were redifined\n      - threshold was modified due to the ADC's higher resolution\n      - logic is reversed due to the transistors\n\n  WARNING: Since the IoT RedBoard with ESP32 has a system voltage of 3.3V, the logic levels\n  is 3.3V instead of 5V on the RedBoard with ATmega328P. Thus, the analog reference voltage\n  for the potentiometer and photoresistor is 3.3V. Make sure you are using 3.3V!\n\n  This sketch was written by SparkFun Electronics, with lots of help from the Arduino community.\n  This code is completely free for any use.\n\n*/\n\nint photoresistor = A4;          //variable for storing the photoresistor value\nint potentiometer = A5;          //this variable will hold a value based on the position of the knob\nint threshold = 3000;            //if the photoresistor reading is lower than this value the light will turn on\n                                 /*Note: The ESP32's ADC resolution is bigger. The max is 4095. In a bright room\n                                 with your finger covering the sensor, the threshold was about 3000. In a dimly\n                                 lit room, the threshold was about 1000. You will need to adjust this value when\n                                 installing it in a room. Just make sure to make it a little more than the thresholed\n                                 of the room. Try adding a button and some code  to save the threshold value! */\n\n//LEDs are connected to these pins\nint RedPin = 16;\nint GreenPin = 17;\nint BluePin = 25;\n\nvoid setup() {\n  Serial.begin(115200);           //start a serial connection with the computer\n  Serial.println(\"12V RGB LED Strip Nightlight!\");\n\n  //set the LED pins to output\n  pinMode(RedPin, OUTPUT);\n  pinMode(GreenPin, OUTPUT);\n  pinMode(BluePin, OUTPUT);\n\n} //END SETUP\n\nvoid loop() {\n\n  photoresistor = analogRead(A4);         //read the value of the photoresistor\n  potentiometer = analogRead(A5);         //read the value of the potentiometer\n\n  Serial.print(\"Photoresistor value:\");\n  Serial.print(photoresistor);          //print the photoresistor value to the serial monitor\n  Serial.print(\"  Potentiometer value:\");\n  Serial.println(potentiometer);          //print the potentiometer value to the serial monitor\n\n  if (photoresistor &lt; threshold) {        //if it's dark (the photoresistor value is below the threshold) turn the LED on\n    //These nested if statements check for a variety of ranges and\n    //call different functions based on the current potentiometer value.\n    //Those functions are found at the bottom of the sketch.\n\n    /*Note: We divided 4095 by 7 colors and had a window of about 585. For users\n            Adding more colors, try dividing 4095 by the total number and adjust\n            eac condition statement*/\n\n    if (potentiometer &gt; 0 &amp;&amp; potentiometer &lt;= 585)\n      red();\n    if (potentiometer &gt; 585 &amp;&amp; potentiometer &lt;= 1170)\n      orange();\n    if (potentiometer &gt; 1170 &amp;&amp; potentiometer &lt;= 1755)\n      yellow();\n    if (potentiometer &gt; 1755 &amp;&amp; potentiometer &lt;= 2340)\n      green();\n    if (potentiometer &gt; 2340 &amp;&amp; potentiometer &lt;= 2925)\n      cyan();\n    if (potentiometer &gt; 2925 &amp;&amp; potentiometer &lt;= 3510)\n      blue();\n    if (potentiometer &gt; 3510)\n      magenta();\n  }\n  else {                                //if it isn't dark turn the LED off\n\n    turnOff();                            //call the turn off function\n\n  }\n\n  delay(100);                             //short delay so that the printout is easier to read\n\n} //END LOOP\n\nvoid red () {\n\n  //set the LED pins to values that make red\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 255);\n  analogWrite(BluePin, 255);\n}\nvoid orange () {\n\n  //set the LED pins to values that make orange\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 128);\n  analogWrite(BluePin, 255);\n}\nvoid yellow () {\n\n  //set the LED pins to values that make yellow\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 255);\n}\nvoid green () {\n\n  //set the LED pins to values that make green\n  analogWrite(RedPin, 255);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 255);\n}\nvoid cyan () {\n\n  //set the LED pins to values that make cyan\n  analogWrite(RedPin, 255);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}\nvoid blue () {\n\n  //set the LED pins to values that make blue\n  analogWrite(RedPin, 255);\n  analogWrite(GreenPin, 255);\n  analogWrite(BluePin, 0);\n}\nvoid magenta () {\n\n  //set the LED pins to values that make magenta\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 255);\n  analogWrite(BluePin, 0);\n}\nvoid turnOff () {\n\n  //set all three LED pins to 0 or OFF\n  analogWrite(RedPin, 255);\n  analogWrite(GreenPin, 255);\n  analogWrite(BluePin, 255);\n}\n</code></pre>"},{"location":"arduino_examples/#what-you-should-see_3","title":"What You Should See","text":"<p>Once the code has uploaded, disconnect the USB cable from the IoT RedBoard - ESP32. Then insert the barrel jack from a power supply to the MOSFET Power Switch and Buck Regulator's barrel jack connector. In this case, we used a 12V wall adapter power supply.</p> <p>The MOSFET Power Switch &amp; Buck Regulator with the wall adapter. Cover the photoresistor with your finger (or just turn off the lights in the room) and turn the potentiometer. You should notice the colors cycling through as the potentiometer is within certain ranges. You will probably want to disconnect the 3.3V jumper wire from the IoT RedBoard - ESP32, reconnect the USB cable, and open the Arduino Serial Monitor at 115200 baud for debugging purposes. That way you can view the serial data and adjust the threshold value based on the lighting in the room.</p> <p>Now that we have ported the example from the RedBoard Qwiic with an ATmega328P to the RedBoard IoT Development Board - ESP32, try adjusting the condition statement with the potentiometer to add additional colors. Or even writing some code save the threshold value whenever a button is pressed down. You can also try to take advantage of the ESP32's wireless capabilities and adjust the color of the LED strip based on the weather.</p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_hookup/","title":"Hardware Hookup","text":"<p>In this section, we'll go over how to connect the MOSFET Power Switch to your system.</p>"},{"location":"hardware_hookup/#upload-code-to-the-microcontroller","title":"Upload Code to the Microcontroller","text":"<p>When uploading code to the IoT RedBoard - ESP32, we will connect a USB C cable. When powering the load, we will want to disconnect the USB cable to avoid conflicting voltages.</p> <p>Tip</p> <p>If necessary, you can disconnect the 3.3V jumper wire connecting the MOSFET Power Switch and Buck Regulator to the IoT RedBoard - ESP32. That way you can power the load with the barrel jack while also debugging code when the USB cable is connected to the IoT RedBoard - ESP32.</p>"},{"location":"hardware_hookup/#control","title":"Control","text":"<p>Note</p> <p>The tutorial focuses on using a microcontroller with Arduino. However, if your microcontroller has a digital or PWM, you can also control the N-channel MOSFET controller as well! You can also use this using a micro:bit with MakeCode or Raspberry Pi's RP2040 microcontroller with MicroPython!</p> <p>For prototyping or connecting to the control side, we recommend using a 3.3V development board with header pins already soldered to the board. In this case, we used the IoT RedBoard - ESP32. Depending on how you are controlling the load, you may need a digital or PWM pin. Don't forget to connect power and ground. In this case, we will use 3.3V from the output of the buck regulator. Of course, you could also connect the microcontroller or additional devices to the VCC pin as an alternative. Just make sure to choose one when powering your microcontroller or any additional peripheral device.</p> MOSFET Power Switch              IoT RedBoard - ESP32              3V3 3.3V GND GND CTL D25 <p>Below is a circuit diagram with the MOSFET Power Switch and Buck Regulator Break connecting to the IoT RedBoard - ESP32. Most of the examples will follow this pin connection to control the load. However, there are a few examples that will include additional circuits and a different pin for the control.</p> <p>Warning</p> <p>When powering and programming your Arduino, make sure to disconnect power between the MOSFET Power Switch and Arduino to avoid conflicting voltages. Of course you could use a Schottky diode for protection. The caveat is that you will just have a slight voltage drop.</p>"},{"location":"hardware_hookup/#load","title":"Load","text":"<p>Connect a high voltage device of your choice (e.g. DC motor, solenoid, 12V LED) to the load side (VCC to + and GND to \u2212). You will need a ball point pen to push down on each poke-home connector's tab. A mini screwdriver (Phillips or flat head) will also work as well.  As you are pressing down on the tab, insert a stripped wire or jumper wire pin into the socket. Repeat for the other connection.</p> <p>Below are a few examples. The squirrel cage blower we just inserted the Poke-Home conenctor since the wires were stripped. For the latching solenoid, we used M/M jumper wires between the 2-pin connector and the Poke-Home connector. We used part of a 12V LED strip rather than a full strip.</p> <p>Tip</p> <p>Worried about the M/M jumper wire's pins when inserting the Poke-Home connector? There are other M/M jumper wires available. These are lower cost and  so you do not have to worry about damaging your premium jumper wires. These were used with the latching solenoid's 2-pin connector.</p>"},{"location":"hardware_hookup/#input-voltage","title":"Input Voltage","text":"<p>Grab a compatible wall adapter that is within the recommended voltage range for your project. Make sure that the barrel jack's output is a center-positive. Then insert it into the barrel jack connector.</p>"},{"location":"hardware_hookup/#connecting-to-the-pths","title":"Connecting to the PTHs","text":"<p>For users that prefer to use the PTHs, we recommending soldering to the connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> <p>Tip</p> <p>The PTHs are connected to large polygon pours and traces. You may need a larger soldering iron tip, increase the soldering station's temperature, some flux, or leave the soldering tip a little longer in order for the solder to flow better.</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>In this section, we will highlight the features of the N-channel MOSFET Power Switch and Buck Regulator (Low-Side). For more information about the LMR14203 3.3V buck regulator or PSMN7R0-100BS N-channel MOSFET, make sure to check out the datasheets that are linked in the Resources section.</p> Top View Bottom View"},{"location":"hardware_overview/#n-channel-mosfet","title":"N-Channel MOSFET","text":"<p>The N-channel MOSFET is configured as a low-side switch. On the back of the board, there is a ground plane to aid in heat dissipation. At 12V, 3A the board stays cool (40 \u00b0C;) under a continuous load. At 12V, 8.5A with shorter bursts of current (i.e. 5-10 seconds per burst, max current), the board gets toasty (80\u00b0C;). You will want to avoid touching the board since it will burn your finger.</p> N-Channel MOSFET Ground Plane Under MOSFET for Heat Dissipation"},{"location":"hardware_overview/#input-voltage","title":"Input Voltage","text":"<p>There are two options to connect to the input voltage:</p> <ul> <li>Barrel Jack \u2014 For users with a wall adapter, you could use a 5.5mm x 2.1mm center positive, barrel jack with the recommended input voltage. This is for users that want to easily connect the power supply without the need to solder. Make sure to check the specifications of your wall adapter before connecting since some power supplies have a different polarity.</li> <li>PTHs \u2014 There is also a pair of pads beside the barrel jack to connect to the input voltage (VIN) and ground (GND). The PTHs are for users that want a more permanent connection and require a smaller profile by soldering wires directly to the PTH. We recommend connecting power from your power supply to this VIN PTH rather than the one by the 1x4 header. The polygon pours connected to the PTH are thicker and can handle the power as opposed to the VCC pin by the 1x4 header.</li> </ul> <p>These connections are broken out as follows:</p> <ul> <li>VIN \u2014 The recommended input voltage is between 4.5V and 12V.</li> <li>GND \u2014 Common ground or 0V.</li> </ul> Input Voltage Options Highlighted"},{"location":"hardware_overview/#33v-regulator-output-voltage","title":"3.3V Regulator Output Voltage","text":"<p>Voltage from the input is brought down to 3.3V/300mA with the buck regulator. This is intended to connect to a microcontroller's 3.3V pin using either the 1x4 header and the PTHs.</p> Output Voltage Highlighted"},{"location":"hardware_overview/#1x4-header-connections","title":"1x4 Header Connections","text":"<p>On the side of the board, there are two options to connect to ground, control pin, output 3.3V voltage, and input voltage,</p> <ul> <li>1x4 female header \u2014 Users that have jumper wires with male pins can easily connect to the female headers.</li> <li>PTHs \u2014 For users that require a more secure connection like the input voltage side, you can also solder to the PTHs as well. As explained earlier, the traces connecting to the VCC on this side is not as big as the one by VIN by the barrel jack.</li> </ul> <p>These connections are broken out as follows:</p> <ul> <li>GND \u2014 Common ground or 0V.</li> <li>CTL \u2014 Short for control, this pin is connected to the N-channel MOSFET's gate pin and it is active low. There is a pull-up resistor connected to this pin. Users can connect to a jumper wire from this pin to GND to turn on the MOSFET and provide power to the load. Of course, this board was designed to connect to a microcontroller so it can be connected to a digital or PWM pin. Toggling the control pin with the digital pin will turn on and off MOSFET. Using a PWM pin will give you more flexibility to turn on, off, or partially on the load.  </li> <li>3V3 \u2014 3.3V output from the buck regulator. This is intended to connect to a microcontroller's 3.3V pin.</li> <li>VCC \u2014 This pin is connected to the MEAS jumper and VIN. The trace connecting to the pin on the control side is smaller than the polygon pour for VIN. Users can also connect the microcontroller's input voltage to this pin as an alternative to using the 3V3 if their system requires. Just make sure to choose either the 3V3 or VCC to power the microcontroller. Of course, users can also power additional devices on this pin as well.</li> </ul> 1x4 Header Highlighted"},{"location":"hardware_overview/#load-side","title":"Load Side","text":"<p>There are two options to connect to the output load side.</p> <ul> <li>Poke-Home Connectors \u2014 For users that have a stripped wire or jumper wire pins, you can use a ballpoint pen to press down on the tab of the connector to insert a stripped wire or pin into the connector. You can also use a mini screwdriver (Phillips or flat head)</li> <li>PTHs \u2014 For users that want a permanent connection, you can solder your load directly to the PTHs.</li> </ul> <p>The N-channel MOSFET is configured as a low-side switch: the load is connected to the N-channel MOSFET's drain pin, while the source is connected to ground</p> <p>The load side connections are broken out as follows:</p> <ul> <li>VCC (or +) \u2014 This pin is for connecting the load's input voltage to the VCC pin.</li> <li>LOAD (or \u2212) \u2014 This pin is intended for connecting the load's ground to the LOAD pin.</li> </ul> Load Side Highlighted           <p>Note</p> <p>There is also a flyback diode connected to the load side! This component is for loads with motors. When the motor is spinning and suddenly turned off, the magnetic field inside it collapses, generating a voltage spike. This can damage the transistor. These voltage spikes can also happen with solenoids. The image below (taken from Pete's camera!) shows an oscilloscope measuring the nasty voltage spike as soon as the 12V latching solenoid (without a flyback diode) is turned off.</p> <p> Voltage without Flyback Diode           </p> <p>To prevent voltage spikes, we use a \"flyback diode,\" which suppresses the voltage spike. As seen below the voltage is not as dangerous for our N-channel MOSFET.</p> <p> Voltage with Flyback Diode           </p>"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>There are two LEDs on the board.</p> <ul> <li>PWR \u2014 The power LED lights up when there is power on the output of the 3.3V buck regulator. This LED can be disabled by cutting the trace on the PWR_LED jumper.</li> <li>ON \u2014 The ON LED lights up when the control pin is pulled low indicating that there is power applied to the load. This LED can be disabled by cutting the trace on the ON_LED jumper.</li> </ul> LEDs Highlighted"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>There are a few jumper pads available on the bottom of the board. For more information on modifying the jumpers, check out our tutorial on working with jumper pads and PCB traces.</p> <ul> <li>PWR_LED \u2014 By default, this jumper is closed. This is connected to the PWR LED and indicates when there is power. Cut this trace to disable the power LED that is connected to 3.3V.</li> <li>MEAS \u2014 To enable measurements and determine how much current your system is pulling, we've added a NC (normally closed) jumper between the two MEAS PTH pins. By cutting this jumper, the voltage connecting to the 3.3V voltage regulator's input is interrupted. Soldering in male jumper pins or wires into the accompanying holes will give you the ability to insert a current meter and precisely monitor how much current your application is consuming.</li> <li>ON_LED \u2014 By default, this jumper is closed. This is connected to the ON LED. This LED indicates when the control pin is pulled low and when there is power applied to the load. Cut this trace to disable the ON LED that is connected to the control pin.</li> </ul> Jumpers Highlighted"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 1.50\" x 1.50\" (38.1mm x 38.1mm), which is slightly bigger than a typical 1.0\"x1.0\" Qwiic sized board. There are 4x mounting holes by each corner of the board.</p> Board Dimensions"},{"location":"introduction/","title":"Introduction","text":"<p>Does your microcontroller need to control a high voltage item, like a 12V LED strip, while needing to be powered as well? Do you want to avoid having multiple power adapters for your project and microcontroller? The MOSFET Power Switch and Buck Regulator (Low-Side) is one of those products that we needed ourselves at SparkFun, so we figured other folks may have the same problem. Power the board with up to 12V and control up to 10A, all while providing a sweet 3.3V to your control board.</p> <p> <ul> <li> <p> </p> <p> SparkFun MOSFET Power Switch and Buck Regulator (Low-Side)    COM-23979    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>In this tutorial, we will go over the hardware, how to connect to the board, and provide some Arduino examples.</p>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. We made a general list below since there are several options available to connect to the MOSFET Power Control and Buck Regulator (Low-Side). We'll list the specific parts used in each of the examples later in the tutorial. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x Microcontroller</li> <li>1x USB Cable</li> <li>1x SparkFun MOSFET Power Switch and Buck Regulator (Low-Side)</li> <li>1x SparkFun Mini Screwdriver</li> <li>1x Pack of Jumper Wires</li> <li>1x High Power Load</li> <li>1x Wall Adapter</li> </ul>"},{"location":"introduction/#microcontroller","title":"Microcontroller","text":"<p>For the scope of the tutorial, we will be using an Arduino microcontroller. In this case, we will be using the SparkFun IoT RedBoard - ESP32. You can use any Arduino microcontroller with digital or PWM pins. Make sure to also include a USB cable that is compatible with your microcontroller.</p> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15092 </p> </li> </ul> <p>Tip</p> <p>The 3.3V output from the MOSFET Power Switch and Buck Regulator (Low-Side) provides another alternative to power microcontrollers that may not be able to accept higher voltages. For example, most of the Thing Plus Development Boards only accept a maximum of 6V at their VIN pin, and they most operate at 3.3V. So this board is especially handy in those use-cases. Additionally, even though the Arduino Pro Mini can accept up to 12V, this will require its onboard linear regulator to work very had to regulate that voltage down to 3.3V. Thus, this MOSFET Power Switch and Buck Regulator (Low-Side) would be the \"cooler\" choice.</p> <p>Note</p> <p>The tutorial focuses on using a microcontroller with Arduino. However, if your microcontroller has a digital or PWM, you can also control the N-channel MOSFET controller as well! You can also use this using a micro:bit with MakeCode or Raspberry Pi's RP2040 microcontroller with MicroPython!</p>"},{"location":"introduction/#12v-leds","title":"12V LEDs","text":"<p>The MOSFET Power Switch and Buck Regulator (Low-Side) can control 12V LEDs. For users with a 12V RGB LED strip, you can control one channel.</p> <ul> <li> <p> </p> <p> LED RGB Strip - Bare (1m)    COM-12021 </p> </li> </ul>"},{"location":"introduction/#motors","title":"Motors","text":"<p>There are a variety of motors with different ratings. Below are a few different motors that you could use for users that just need a motor to spin in one direction.</p> <ul> <li> <p> </p> <p> Blower - Squirrel Cage (12V)    COM-11270 </p> </li> </ul> <ul> <li> <p> </p> <p> Hobby Motor - Gear    ROB-11696 </p> </li> </ul> <ul> <li> <p> </p> <p> Planetary Gearmotor - 140RPM    ROB-15277 </p> </li> </ul> <ul> <li> <p> </p> <p> Vacuum Pump - 12V    ROB-10398 </p> </li> </ul> <ul> <li> <p> </p> <p> Liquid Pump - 500GPH (12V)    ROB-19222 </p> </li> </ul>"},{"location":"introduction/#solenoid","title":"Solenoid","text":"<p>Check below if you need a latching solenoid to lock a box of your secret stash of cookies, solenoid valve to water some plants, or even have the small solenoid tap a glass cup of water! Similar to the motors, each solenoid will have a different rating.</p> <ul> <li> <p> </p> <p> Solenoid - 12V (Latch / Lock)    ROB-15324 </p> </li> </ul> <ul> <li> <p> </p> <p> 12V Solenoid Valve - 3/4\"    ROB-10456 </p> </li> </ul> <ul> <li> <p> </p> <p> Solenoid - 5V (Small)    ROB-11015 </p> </li> </ul>"},{"location":"introduction/#heating-element","title":"Heating Element","text":"<p>Feeling cold? Try adding a small heating pad to warm up your hands or even a horse bit for an early morning ride! Or maybe you want to make a mini-refrigerator to keep your drinks cool with a thermoelectric cooler.</p> <ul> <li> <p> </p> <p> Heating Pad - 5x10cm    COM-11288 </p> </li> </ul> <ul> <li> <p> </p> <p> Heating Pad - 5x15cm    COM-11289 </p> </li> </ul> <ul> <li> <p> </p> <p> Thermoelectric Cooler    COM-15082 </p> </li> </ul>"},{"location":"introduction/#heatsink","title":"Heatsink","text":"<p>Is your MOSFET getting too hot to the touch? You can add a small heatsink to help dissipate some heat. The small heatsink listed below fits the exposed ground plane on the back of the board. If you need a slightly bigger heat sink, there is also the copper heatsink (note that it's a little bigger than the size of the exposed ground plane). You can also use the copper heatsink with the thermoelectric cooler listed above.</p> <ul> <li> <p> </p> <p> Small Heatsink    PRT-11510 </p> </li> </ul> <ul> <li> <p> </p> <p> Thermal Tape 4x4\" Square    PRT-17054 </p> </li> </ul> <ul> <li> <p> </p> <p> Heatsink - 13.20 x 12.10 mm (Copper)    PRT-18704 </p> </li> </ul>"},{"location":"introduction/#power-supply","title":"Power Supply","text":"<p>The power supply that you use will depend on your load and project requirements. For example, the small solenoid is rated for 5V while the latching solenoid is rated for 12V. Below are a few power supplies available in SparkFun's catalog. Not sure which power supply that you need? Try grabbing the power supply sample kit!</p> <ul> <li> <p> </p> <p> SparkFun Power Supply Sample Kit    KIT-19194 </p> </li> </ul> <ul> <li> <p> </p> <p> Wall Adapter Power Supply - 12VDC, 600mA (Barrel Jack)    TOL-15313 </p> </li> </ul> <ul> <li> <p> </p> <p> Wall Adapter Power Supply - 9VDC, 650mA (Barrel Jack)    TOL-15314 </p> </li> </ul> <ul> <li> <p> </p> <p> Wall Adapter Power Supply - 5VDC, 2A (Barrel Jack)    TOL-15313 </p> </li> </ul> <p>If you decided to connect a few MOSFET Power Switch and Buck Regulators (Low-Side) together using the same power supply, you may want to include the following barrel jack adapters.</p> <ul> <li> <p> </p> <p> DC Barrel Jack Adapter - Male    PRT-10287 </p> </li> </ul> <ul> <li> <p> </p> <p> DC Barrel Jack Adapter - Female    PRT-10288 </p> </li> </ul>"},{"location":"introduction/#prototyping-accessories-optional","title":"Prototyping Accessories (Optional)","text":"<p>We've designed the board to allow for an easy connection with the rest of the system using M/M jumper wires. Depending on your application, you can solder header pins or you may need an additional breadboard. Below are a few prototyping accessories that you may want to consider.</p> <ul> <li> <p> </p> <p> Breadboard - Mini Modular (Blue)    PRT-12045 </p> </li> </ul> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Headers - Straight    PRT-00116 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/F Pack of 10    PRT-09140 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Standard 7\" M/M - 30 AWG (30 Pack)    PRT-11026 </p> </li> </ul>"},{"location":"introduction/#tools-optional","title":"Tools (Optional)","text":"<p>Besides the mini screwdriver, there may be other tools that you may need. For a secure connection, you will need to solder two wires between your microcontroller and the breakout board. This requires some assembly and soldering. You may already have a few of these items but if not, the tools and hardware below help with that assembly.</p> <ul> <li> <p> </p> <p> SparkFun Mini Screwdriver    TOL-09146 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded)    TOL-22263 </p> </li> </ul> <ul> <li> <p> </p> <p> PINECIL Soldering Iron Kit    TOL-24063 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul>"},{"location":"introduction/#you-will-also-need","title":"You Will Also Need","text":"<p>If you decide to do some \"magic,\" try grabbing the following with the squirrel cage blower.</p> <ul> <li>Ping Pong Ball</li> </ul>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> Transistors </p> </li> </ul> <ul> <li> <p> </p> <p> Diodes </p> </li> </ul> <ul> <li> <p> </p> <p> Logic Levels </p> </li> </ul> <ul> <li> <p> </p> <p> IoT RedBoard ESP32 Development Board Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Motors and Selecting the Right One </p> </li> </ul> <ul> <li> <p> </p> <p> Non-Addressable RGB LED Strip Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Serial Terminal Basics </p> </li> </ul> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> <ul> <li> <p> </p> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul> <ul> <li> <p> </p> <p> How to Power a Project </p> </li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>Now that you've successfully got your SparkFun MOSFET Power Switch and Buck Regulator (Low-Side) up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Datasheet<ul> <li>LMR14203 (PDF)</li> <li>PSMN7R0-100BS (PDF)</li> </ul> </li> <li>GitHub Hardware Repo</li> </ul>"},{"location":"single_page/","title":"Introduction","text":"<p>Does your microcontroller need to control a high voltage item, like a 12V LED strip, while needing to be powered as well? Do you want to avoid having multiple power adapters for your project and microcontroller? The MOSFET Power Switch and Buck Regulator (Low-Side) is one of those products that we needed ourselves at SparkFun, so we figured other folks may have the same problem. Power the board with up to 12V and control up to 10A, all while providing a sweet 3.3V to your control board.</p> <p> <ul> <li> <p> </p> <p> SparkFun MOSFET Power Switch and Buck Regulator (Low-Side)    COM-23979    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>In this tutorial, we will go over the hardware, how to connect to the board, and provide some Arduino examples.</p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. We made a general list below since there are several options available to connect to the MOSFET Power Control and Buck Regulator (Low-Side). We'll list the specific parts used in each of the examples later in the tutorial. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x Microcontroller</li> <li>1x USB Cable</li> <li>1x SparkFun MOSFET Power Switch and Buck Regulator (Low-Side)</li> <li>1x SparkFun Mini Screwdriver</li> <li>1x Pack of Jumper Wires</li> <li>1x High Power Load</li> <li>1x Wall Adapter</li> </ul>"},{"location":"single_page/#microcontroller","title":"Microcontroller","text":"<p>For the scope of the tutorial, we will be using an Arduino microcontroller. In this case, we will be using the SparkFun IoT RedBoard - ESP32. You can use any Arduino microcontroller with digital or PWM pins. Make sure to also include a USB cable that is compatible with your microcontroller.</p> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15092 </p> </li> </ul> <p>Tip</p> <p>The 3.3V output from the MOSFET Power Switch and Buck Regulator (Low-Side) provides another alternative to power microcontrollers that may not be able to accept higher voltages. For example, most of the Thing Plus Development Boards only accept a maximum of 6V at their VIN pin, and they most operate at 3.3V. So this board is especially handy in those use-cases. Additionally, even though the Arduino Pro Mini can accept up to 12V, this will require its onboard linear regulator to work very had to regulate that voltage down to 3.3V. Thus, this MOSFET Power Switch and Buck Regulator (Low-Side) would be the \"cooler\" choice.</p> <p>Note</p> <p>The tutorial focuses on using a microcontroller with Arduino. However, if your microcontroller has a digital or PWM, you can also control the N-channel MOSFET controller as well! You can also use this using a micro:bit with MakeCode or Raspberry Pi's RP2040 microcontroller with MicroPython!</p>"},{"location":"single_page/#12v-leds","title":"12V LEDs","text":"<p>The MOSFET Power Switch and Buck Regulator (Low-Side) can control 12V LEDs. For users with a 12V RGB LED strip, you can control one channel.</p> <ul> <li> <p> </p> <p> LED RGB Strip - Bare (1m)    COM-12021 </p> </li> </ul>"},{"location":"single_page/#motors","title":"Motors","text":"<p>There are a variety of motors with different ratings. Below are a few different motors that you could use for users that just need a motor to spin in one direction.</p> <ul> <li> <p> </p> <p> Blower - Squirrel Cage (12V)    COM-11270 </p> </li> </ul> <ul> <li> <p> </p> <p> Hobby Motor - Gear    ROB-11696 </p> </li> </ul> <ul> <li> <p> </p> <p> Planetary Gearmotor - 140RPM    ROB-15277 </p> </li> </ul> <ul> <li> <p> </p> <p> Vacuum Pump - 12V    ROB-10398 </p> </li> </ul> <ul> <li> <p> </p> <p> Liquid Pump - 500GPH (12V)    ROB-19222 </p> </li> </ul>"},{"location":"single_page/#solenoid","title":"Solenoid","text":"<p>Check below if you need a latching solenoid to lock a box of your secret stash of cookies, solenoid valve to water some plants, or even have the small solenoid tap a glass cup of water! Similar to the motors, each solenoid will have a different rating.</p> <ul> <li> <p> </p> <p> Solenoid - 12V (Latch / Lock)    ROB-15324 </p> </li> </ul> <ul> <li> <p> </p> <p> 12V Solenoid Valve - 3/4\"    ROB-10456 </p> </li> </ul> <ul> <li> <p> </p> <p> Solenoid - 5V (Small)    ROB-11015 </p> </li> </ul>"},{"location":"single_page/#heating-element","title":"Heating Element","text":"<p>Feeling cold? Try adding a small heating pad to warm up your hands or even a horse bit for an early morning ride! Or maybe you want to make a mini-refrigerator to keep your drinks cool with a thermoelectric cooler.</p> <ul> <li> <p> </p> <p> Heating Pad - 5x10cm    COM-11288 </p> </li> </ul> <ul> <li> <p> </p> <p> Heating Pad - 5x15cm    COM-11289 </p> </li> </ul> <ul> <li> <p> </p> <p> Thermoelectric Cooler    COM-15082 </p> </li> </ul>"},{"location":"single_page/#heatsink","title":"Heatsink","text":"<p>Is your MOSFET getting too hot to the touch? You can add a small heatsink to help dissipate some heat. The small heatsink listed below fits the exposed ground plane on the back of the board. If you need a slightly bigger heat sink, there is also the copper heatsink (note that it's a little bigger than the size of the exposed ground plane). You can also use the copper heatsink with the thermoelectric cooler listed above.</p> <ul> <li> <p> </p> <p> Small Heatsink    PRT-11510 </p> </li> </ul> <ul> <li> <p> </p> <p> Thermal Tape 4x4\" Square    PRT-17054 </p> </li> </ul> <ul> <li> <p> </p> <p> Heatsink - 13.20 x 12.10 mm (Copper)    PRT-18704 </p> </li> </ul>"},{"location":"single_page/#power-supply","title":"Power Supply","text":"<p>The power supply that you use will depend on your load and project requirements. For example, the small solenoid is rated for 5V while the latching solenoid is rated for 12V. Below are a few power supplies available in SparkFun's catalog. Not sure which power supply that you need? Try grabbing the power supply sample kit!</p> <ul> <li> <p> </p> <p> SparkFun Power Supply Sample Kit    KIT-19194 </p> </li> </ul> <ul> <li> <p> </p> <p> Wall Adapter Power Supply - 12VDC, 600mA (Barrel Jack)    TOL-15313 </p> </li> </ul> <ul> <li> <p> </p> <p> Wall Adapter Power Supply - 9VDC, 650mA (Barrel Jack)    TOL-15314 </p> </li> </ul> <ul> <li> <p> </p> <p> Wall Adapter Power Supply - 5VDC, 2A (Barrel Jack)    TOL-15313 </p> </li> </ul> <p>If you decided to connect a few MOSFET Power Switch and Buck Regulators (Low-Side) together using the same power supply, you may want to include the following barrel jack adapters.</p> <ul> <li> <p> </p> <p> DC Barrel Jack Adapter - Male    PRT-10287 </p> </li> </ul> <ul> <li> <p> </p> <p> DC Barrel Jack Adapter - Female    PRT-10288 </p> </li> </ul>"},{"location":"single_page/#prototyping-accessories-optional","title":"Prototyping Accessories (Optional)","text":"<p>We've designed the board to allow for an easy connection with the rest of the system using M/M jumper wires. Depending on your application, you can solder header pins or you may need an additional breadboard. Below are a few prototyping accessories that you may want to consider.</p> <ul> <li> <p> </p> <p> Breadboard - Mini Modular (Blue)    PRT-12045 </p> </li> </ul> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Headers - Straight    PRT-00116 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/F Pack of 10    PRT-09140 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Standard 7\" M/M - 30 AWG (30 Pack)    PRT-11026 </p> </li> </ul>"},{"location":"single_page/#tools-optional","title":"Tools (Optional)","text":"<p>Besides the mini screwdriver, there may be other tools that you may need. For a secure connection, you will need to solder two wires between your microcontroller and the breakout board. This requires some assembly and soldering. You may already have a few of these items but if not, the tools and hardware below help with that assembly.</p> <ul> <li> <p> </p> <p> SparkFun Mini Screwdriver    TOL-09146 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded)    TOL-22263 </p> </li> </ul> <ul> <li> <p> </p> <p> PINECIL Soldering Iron Kit    TOL-24063 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul>"},{"location":"single_page/#you-will-also-need","title":"You Will Also Need","text":"<p>If you decide to do some \"magic,\" try grabbing the following with the squirrel cage blower.</p> <ul> <li>Ping Pong Ball</li> </ul>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> Transistors </p> </li> </ul> <ul> <li> <p> </p> <p> Diodes </p> </li> </ul> <ul> <li> <p> </p> <p> Logic Levels </p> </li> </ul> <ul> <li> <p> </p> <p> IoT RedBoard ESP32 Development Board Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Motors and Selecting the Right One </p> </li> </ul> <ul> <li> <p> </p> <p> Non-Addressable RGB LED Strip Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Serial Terminal Basics </p> </li> </ul> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> <ul> <li> <p> </p> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul> <ul> <li> <p> </p> <p> How to Power a Project </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>In this section, we will highlight the features of the N-channel MOSFET Power Switch and Buck Regulator (Low-Side). For more information about the LMR14203 3.3V buck regulator or PSMN7R0-100BS N-channel MOSFET, make sure to check out the datasheets that are linked in the Resources section.</p> Top View Bottom View"},{"location":"single_page/#n-channel-mosfet","title":"N-Channel MOSFET","text":"<p>The N-channel MOSFET is configured as a low-side switch. On the back of the board, there is a ground plane to aid in heat dissipation. At 12V, 3A the board stays cool (40 \u00b0C;) under a continuous load. At 12V, 8.5A with shorter bursts of current (i.e. 5-10 seconds per burst, max current), the board gets toasty (80\u00b0C;). You will want to avoid touching the board since it will burn your finger.</p> N-Channel MOSFET Ground Plane Under MOSFET for Heat Dissipation"},{"location":"single_page/#input-voltage","title":"Input Voltage","text":"<p>There are two options to connect to the input voltage:</p> <ul> <li>Barrel Jack \u2014 For users with a wall adapter, you could use a 5.5mm x 2.1mm center positive, barrel jack with the recommended input voltage. This is for users that want to easily connect the power supply without the need to solder. Make sure to check the specifications of your wall adapter before connecting since some power supplies have a different polarity.</li> <li>PTHs \u2014 There is also a pair of pads beside the barrel jack to connect to the input voltage (VIN) and ground (GND). The PTHs are for users that want a more permanent connection and require a smaller profile by soldering wires directly to the PTH. We recommend connecting power from your power supply to this VIN PTH rather than the one by the 1x4 header. The polygon pours connected to the PTH are thicker and can handle the power as opposed to the VCC pin by the 1x4 header.</li> </ul> <p>These connections are broken out as follows:</p> <ul> <li>VIN \u2014 The recommended input voltage is between 4.5V and 12V.</li> <li>GND \u2014 Common ground or 0V.</li> </ul> Input Voltage Options Highlighted"},{"location":"single_page/#33v-regulator-output-voltage","title":"3.3V Regulator Output Voltage","text":"<p>Voltage from the input is brought down to 3.3V/300mA with the buck regulator. This is intended to connect to a microcontroller's 3.3V pin using either the 1x4 header and the PTHs.</p> Output Voltage Highlighted"},{"location":"single_page/#1x4-header-connections","title":"1x4 Header Connections","text":"<p>On the side of the board, there are two options to connect to ground, control pin, output 3.3V voltage, and input voltage,</p> <ul> <li>1x4 female header \u2014 Users that have jumper wires with male pins can easily connect to the female headers.</li> <li>PTHs \u2014 For users that require a more secure connection like the input voltage side, you can also solder to the PTHs as well. As explained earlier, the traces connecting to the VCC on this side is not as big as the one by VIN by the barrel jack.</li> </ul> <p>These connections are broken out as follows:</p> <ul> <li>GND \u2014 Common ground or 0V.</li> <li>CTL \u2014 Short for control, this pin is connected to the N-channel MOSFET's gate pin and it is active low. There is a pull-up resistor connected to this pin. Users can connect to a jumper wire from this pin to GND to turn on the MOSFET and provide power to the load. Of course, this board was designed to connect to a microcontroller so it can be connected to a digital or PWM pin. Toggling the control pin with the digital pin will turn on and off MOSFET. Using a PWM pin will give you more flexibility to turn on, off, or partially on the load.  </li> <li>3V3 \u2014 3.3V output from the buck regulator. This is intended to connect to a microcontroller's 3.3V pin.</li> <li>VCC \u2014 This pin is connected to the MEAS jumper and VIN. The trace connecting to the pin on the control side is smaller than the polygon pour for VIN. Users can also connect the microcontroller's input voltage to this pin as an alternative to using the 3V3 if their system requires. Just make sure to choose either the 3V3 or VCC to power the microcontroller. Of course, users can also power additional devices on this pin as well.</li> </ul> 1x4 Header Highlighted"},{"location":"single_page/#load-side","title":"Load Side","text":"<p>There are two options to connect to the output load side.</p> <ul> <li>Poke-Home Connectors \u2014 For users that have a stripped wire or jumper wire pins, you can use a ballpoint pen to press down on the tab of the connector to insert a stripped wire or pin into the connector. You can also use a mini screwdriver (Phillips or flat head)</li> <li>PTHs \u2014 For users that want a permanent connection, you can solder your load directly to the PTHs.</li> </ul> <p>The N-channel MOSFET is configured as a low-side switch: the load is connected to the N-channel MOSFET's drain pin, while the source is connected to ground</p> <p>The load side connections are broken out as follows:</p> <ul> <li>VCC (or +) \u2014 This pin is for connecting the load's input voltage to the VCC pin.</li> <li>LOAD (or \u2212) \u2014 This pin is intended for connecting the load's ground to the LOAD pin.</li> </ul> Load Side Highlighted           <p>Note</p> <p>There is also a flyback diode connected to the load side! This component is for loads with motors. When the motor is spinning and suddenly turned off, the magnetic field inside it collapses, generating a voltage spike. This can damage the transistor. These voltage spikes can also happen with solenoids. The image below (taken from Pete's camera!) shows an oscilloscope measuring the nasty voltage spike as soon as the 12V latching solenoid (without a flyback diode) is turned off.</p> <p> Voltage without Flyback Diode           </p> <p>To prevent voltage spikes, we use a \"flyback diode,\" which suppresses the voltage spike. As seen below the voltage is not as dangerous for our N-channel MOSFET.</p> <p> Voltage with Flyback Diode           </p>"},{"location":"single_page/#leds","title":"LEDs","text":"<p>There are two LEDs on the board.</p> <ul> <li>PWR \u2014 The power LED lights up when there is power on the output of the 3.3V buck regulator. This LED can be disabled by cutting the trace on the PWR_LED jumper.</li> <li>ON \u2014 The ON LED lights up when the control pin is pulled low indicating that there is power applied to the load. This LED can be disabled by cutting the trace on the ON_LED jumper.</li> </ul> LEDs Highlighted"},{"location":"single_page/#jumpers","title":"Jumpers","text":"<p>There are a few jumper pads available on the bottom of the board. For more information on modifying the jumpers, check out our tutorial on working with jumper pads and PCB traces.</p> <ul> <li>PWR_LED \u2014 By default, this jumper is closed. This is connected to the PWR LED and indicates when there is power. Cut this trace to disable the power LED that is connected to 3.3V.</li> <li>MEAS \u2014 To enable measurements and determine how much current your system is pulling, we've added a NC (normally closed) jumper between the two MEAS PTH pins. By cutting this jumper, the voltage connecting to the 3.3V voltage regulator's input is interrupted. Soldering in male jumper pins or wires into the accompanying holes will give you the ability to insert a current meter and precisely monitor how much current your application is consuming.</li> <li>ON_LED \u2014 By default, this jumper is closed. This is connected to the ON LED. This LED indicates when the control pin is pulled low and when there is power applied to the load. Cut this trace to disable the ON LED that is connected to the control pin.</li> </ul> Jumpers Highlighted"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 1.50\" x 1.50\" (38.1mm x 38.1mm), which is slightly bigger than a typical 1.0\"x1.0\" Qwiic sized board. There are 4x mounting holes by each corner of the board.</p> Board Dimensions"},{"location":"single_page/#hardware-hookup","title":"Hardware Hookup","text":"<p>In this section, we'll go over how to connect the MOSFET Power Switch to your system.</p>"},{"location":"single_page/#upload-code-to-the-microcontroller","title":"Upload Code to the Microcontroller","text":"<p>When uploading code to the IoT RedBoard - ESP32, we will connect a USB C cable. When powering the load, we will want to disconnect the USB cable to avoid conflicting voltages.</p> <p>Tip</p> <p>If necessary, you can disconnect the 3.3V jumper wire connecting the MOSFET Power Switch and Buck Regulator to the IoT RedBoard - ESP32. That way you can power the load with the barrel jack while also debugging code when the USB cable is connected to the IoT RedBoard - ESP32.</p>"},{"location":"single_page/#control","title":"Control","text":"<p>Note</p> <p>The tutorial focuses on using a microcontroller with Arduino. However, if your microcontroller has a digital or PWM, you can also control the N-channel MOSFET controller as well! You can also use this using a micro:bit with MakeCode or Raspberry Pi's RP2040 microcontroller with MicroPython!</p> <p>For prototyping or connecting to the control side, we recommend using a 3.3V development board with header pins already soldered to the board. In this case, we used the IoT RedBoard - ESP32. Depending on how you are controlling the load, you may need a digital or PWM pin. Don't forget to connect power and ground. In this case, we will use 3.3V from the output of the buck regulator. Of course, you could also connect the microcontroller or additional devices to the VCC pin as an alternative. Just make sure to choose one when powering your microcontroller or any additional peripheral device.</p> MOSFET Power Switch              IoT RedBoard - ESP32              3V3 3.3V GND GND CTL D25 <p>Below is a circuit diagram with the MOSFET Power Switch and Buck Regulator Break connecting to the IoT RedBoard - ESP32. Most of the examples will follow this pin connection to control the load. However, there are a few examples that will include additional circuits and a different pin for the control.</p> <p>Warning</p> <p>When powering and programming your Arduino, make sure to disconnect power between the MOSFET Power Switch and Arduino to avoid conflicting voltages. Of course you could use a Schottky diode for protection. The caveat is that you will just have a slight voltage drop.</p>"},{"location":"single_page/#load","title":"Load","text":"<p>Connect a high voltage device of your choice (e.g. DC motor, solenoid, 12V LED) to the load side (VCC to + and GND to \u2212). You will need a ball point pen to push down on each poke-home connector's tab. A mini screwdriver (Phillips or flat head) will also work as well.  As you are pressing down on the tab, insert a stripped wire or jumper wire pin into the socket. Repeat for the other connection.</p> <p>Below are a few examples. The squirrel cage blower we just inserted the Poke-Home conenctor since the wires were stripped. For the latching solenoid, we used M/M jumper wires between the 2-pin connector and the Poke-Home connector. We used part of a 12V LED strip rather than a full strip.</p> <p>Tip</p> <p>Worried about the M/M jumper wire's pins when inserting the Poke-Home connector? There are other M/M jumper wires available. These are lower cost and  so you do not have to worry about damaging your premium jumper wires. These were used with the latching solenoid's 2-pin connector.</p>"},{"location":"single_page/#input-voltage_1","title":"Input Voltage","text":"<p>Grab a compatible wall adapter that is within the recommended voltage range for your project. Make sure that the barrel jack's output is a center-positive. Then insert it into the barrel jack connector.</p>"},{"location":"single_page/#connecting-to-the-pths","title":"Connecting to the PTHs","text":"<p>For users that prefer to use the PTHs, we recommending soldering to the connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> <p>Tip</p> <p>The PTHs are connected to large polygon pours and traces. You may need a larger soldering iron tip, increase the soldering station's temperature, some flux, or leave the soldering tip a little longer in order for the solder to flow better.</p>"},{"location":"single_page/#arduino-examples","title":"Arduino Examples","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using the Arduino IDE or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> </ul> <p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <p>You will need either a microcontroller's digital or PWM pin to control the N-channel MOSFET Power Switch. Let's check out a few of the examples below to get started!</p>"},{"location":"single_page/#example-1-switching-a-load","title":"Example 1: Switching a Load","text":"<p>In this example, we will turn on and off a load using the N-channel MOSFET every few seconds. The load can be a solenoid, DC motor, or a 12V LED.</p>"},{"location":"single_page/#parts-needed","title":"Parts Needed","text":"<p>Grab the following quantities of each part listed to build this circuit:</p> <ul> <li>1x SparkFun IoT RedBoard - ESP32 Development Board</li> <li>1x USB-C Cable</li> <li>3x SparkFun MOSFET Power Switch and Buck Regulator (Low-Side)</li> <li>1x SparkFun Mini Screwdriver</li> <li>3x M/M Jumper Wires</li> <li>1x Squirrel Cage Blower (12V)</li> <li>1x Ping Pong Ball</li> <li>1x 12V Wall Adapter Power Supply</li> </ul>"},{"location":"single_page/#hardware-hookup_1","title":"Hardware Hookup","text":"<p>You will need to connect everything as explained earlier. For this particular example, we will use a squirrel cage blower with a motor as shown in the circuit diagram below. Of course, we are using a generic motor in the circuit diagram to represent the squirrel cage blower.</p> <p>Your setup should look similar to the image below without the power supply.</p>"},{"location":"single_page/#upload-code","title":"Upload Code","text":"<p>To upload code, insert the USB cable into the IoT RedBoard - ESP32.</p> <p>Note</p> <p>This example is similar to the built-in Arduino example. From the menu, select the following: File &gt; Examples &gt; 01.Basics &gt; Blink. You will need to modify the macro (<code>LED_BUILTIN</code>) with a digital pin for your microcontroller. Note that the logic is reversed due to the transistor.</p> <p>Copy the following code and paste it in the Arduino IDE. If you have not already, select your Board (in this case, the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button.</p> <pre><code>/******************************************************************************\n  Example 1: Switching a Load\n  Modified By: Ho Yun \"Bobby\" Chan\n  SparkFun Electronics\n  Date: October 27th, 2023\n  License: MIT. See license file for more information but you can\n  basically do whatever you want with this code.\n\n  This example is based on Arduino's blink example. It has been modified\n  so that it can be used for the SparkFun IoT RedBoard - ESP32 but it can be\n  used with any Arduino that has a digital pin. The load (solenoid, DC motor,\n  or 12V LED) will toggle on and off every 5 seconds.\n\n  Users can also open the Serial Monitor at 115200 to check on\n  the status of the load for debugging.\n\n  Feel like supporting open source hardware?\n  Buy a board or component from SparkFun!\n\n      SparkFun IoT RedBoard - ESP32 Development Board:            https://www.sparkfun.com/products/19177\n      SparkFun MOSFET Power Switch and Buck Regulator (Low-Side): https://www.sparkfun.com/products/23979\n      Solenoid - 12V (Latch / Lock):                              https://www.sparkfun.com/products/15324\n      Hobby Motor - Gear:                                         https://www.sparkfun.com/products/11696\n      Blower - Squirrel Cage (12V):                               https://www.sparkfun.com/products/11270\n      12V LED RGB Strip - Bare (1m):                              https://www.sparkfun.com/products/12021\n      Wall Adapter 12V/600mA, (Barrel Jack):                      https://www.sparkfun.com/products/15313\n\n  Distributed as-is; no warranty is given.\n******************************************************************************/\n\n//define a pin for the load, you'll need to adjust this\n//depending on the microcontroller that you using\nconst int loadPin = 25;\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n\n  //Initialize Serial for Debugging if there is no built-in LED\n  Serial.begin(115200);\n  Serial.println(\"Toggling a Load!\");\n\n  // initialize digital pin as an output.\n  pinMode(loadPin, OUTPUT);\n  digitalWrite(loadPin, HIGH);  // turn the LOAD off (HIGH is the voltage level)\n  Serial.println(\"OFF\");\n\n}  //END SETUP\n\n\n\n// the loop function runs over and over again forever\nvoid loop() {\n\n  digitalWrite(loadPin, LOW);  // turn the LOAD ON (LOW is the voltage level)\n  Serial.println(\"ON\");\n  delay(5000);  // wait for a few seconds\n\n  digitalWrite(loadPin, HIGH);  // turn the LOAD OFF by making the voltage HIGH\n  Serial.println(\"OFF\");\n  delay(5000);  // wait for a few seconds\n\n}  //END LOOP\n</code></pre>"},{"location":"single_page/#what-you-should-see","title":"What You Should See","text":"<p>Once the code has uploaded, Once the code has uploaded, disconnect the USB cable from the IoT RedBoard - ESP32. Then insert the barrel jack from a power supply to the MOSFET Power Switch and Buck Regulator's barrel jack connector. In this case, we used a 12V wall adapter power supply.</p> <p>The load will be powered on for 5 seconds before turning back off for another 5 seconds. Compared to the original blink example, the delay is longer to allow enough time for the load to turn on. This will loop forever until you remove power. If necessary, disconnect the 3.3V jumper wire from the IoT RedBoard - ESP32, reconnect the USB cable, and open the Arduino Serial Monitor at 115200 baud for debugging purposes.</p> <p>Try adjusting the delay or even adding a Qwiic sensor with some code to trigger a load!</p>"},{"location":"single_page/#example-2-toggling-a-load-with-a-button","title":"Example 2: Toggling a Load with a Button","text":"<p>In this example, we will turn on and off a load using the N-channel MOSFET with a button press. The load can be a solenoid, DC motor, or a 12V LED.</p>"},{"location":"single_page/#parts-needed_1","title":"Parts Needed","text":"<p>Grab the following quantities of each part listed to build this circuit:</p> <ul> <li>1x SparkFun IoT RedBoard - ESP32 Development Board</li> <li>1x USB-C Cable</li> <li>3x SparkFun MOSFET Power Switch and Buck Regulator (Low-Side)</li> <li>1x SparkFun Mini Screwdriver</li> <li>7x M/M Jumper Wires</li> <li>1x Mini Breadboard</li> <li>1x Momentary Push Button</li> <li>1x Latching Solenoid (12V)</li> <li>1x 12V Wall Adapter Power Supply</li> </ul>"},{"location":"single_page/#hardware-hookup_2","title":"Hardware Hookup","text":"<p>You will need to connect everything as explained earlier (with the exception of the momentary push button). For this particular example, we will use a latching solenoid and add a momentary pushbutton as shown in the circuit diagram below.</p> <p>Your setup should look similar to the image below without the power supply.</p>"},{"location":"single_page/#upload-code_1","title":"Upload Code","text":"<p>To upload code, insert the USB cable into the IoT RedBoard - ESP32.</p> <p>Copy the following code and paste it in the Arduino IDE. If you have not already, select your Board (in this case, the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button.</p> <pre><code>/******************************************************************************\n  Example 2: Toggling a Load with a Button\n  Written By: Ho Yun \"Bobby\" Chan\n  SparkFun Electronics\n  Date: October 27th, 2023\n  License: MIT. See license file for more information but you can\n  basically do whatever you want with this code.\n\n  This example toggles the load (solenoid, DC motor, or 12V LED)\n  based on a button press. The status LED will light up at the\n  same time. This example checks to see if the momentary button\n  is still being pressed and will only toggle the load when the\n  button after releasing and pressing down on the button again.\n\n  The example was tested on the SparkFun IoT RedBoard - ESP32.\n  However, it can be used with any Arduino that has a digital pin.\n  Users can also open the Serial Monitor at 115200 to check on\n  the status of the button for debugging.\n\n  Feel like supporting open source hardware?\n  Buy a board or component from SparkFun!\n\n      SparkFun MOSFET Power Switch and Buck Regulator (Low-Side): https://www.sparkfun.com/products/23979\n      SparkFun IoT RedBoard - ESP32 Development Board:            https://www.sparkfun.com/products/19177\n      Solenoid - 12V (Latch / Lock):                              https://www.sparkfun.com/products/15324\n      Hobby Motor - Gear:                                         https://www.sparkfun.com/products/11696\n      Blower - Squirrel Cage (12V):                               https://www.sparkfun.com/products/11270\n      12V LED RGB Strip - Bare (1m):                              https://www.sparkfun.com/products/12021\n      Wall Adapter 12V/600mA, (Barrel Jack):                      https://www.sparkfun.com/products/15313\n\n  Distributed as-is; no warranty is given.\n******************************************************************************/\n\n// pushbutton 1 pin\nconst int button1Pin = 4;\nboolean button1State = false;\nboolean prevbutton1State = false;\nboolean currentbutton1State = false;\n\n//define a pin for the load, you'll need to adjust this\n//depending on the microcontroller that you using\nconst int loadPin = 25;\nboolean mode = false;  //mode to toggle load, set to off at the start\n\nconst int ledPin = 18;  // built-in LED pin for IoT RedBoard - ESP32\n                        /*Note: Users can also use the macro LED_BUILTIN. Just make sure to comment the line above\n                        and replace \"ledPIN\" with \"LEDBUILTIN\"*/\n\n\n\nvoid setup() {\n\n  //Initialize Serial for Debugging if there is no built-in LED\n  Serial.begin(115200);\n  Serial.println(\"Toggling a Load with a Button!\");\n\n  // Set up the pushbutton pin to be an input with a pull-up resistor:\n  pinMode(button1Pin, INPUT_PULLUP);\n\n  // Set up the load pin to be an output and turn it off:\n  pinMode(loadPin, OUTPUT);\n  digitalWrite(loadPin, HIGH);\n\n  //Set up built-in LED as an OUTPUT and ensure that it is off as well:\n  pinMode(ledPin, OUTPUT);\n  digitalWrite(ledPin, LOW);\n\n  Serial.println(\"OFF\");\n\n}  //END SETUP\n\n\n\nvoid loop() {\n\n  button1State = digitalRead(button1Pin);\n\n  //if button is pressed, it will be pulled low\n  if (button1State == LOW) {\n    currentbutton1State = true;  // button has been pressed once\n\n    if (prevbutton1State != currentbutton1State) {  //check to see if button is still being pressed\n\n      if (mode == false) {\n        mode = true;\n      } else {\n        mode = false;\n      }\n\n      if (mode == true) {\n\n        digitalWrite(loadPin, LOW);\n        digitalWrite(ledPin, HIGH);\n        Serial.println(\"ON\");\n\n      } else {\n\n        digitalWrite(loadPin, HIGH);\n        digitalWrite(ledPin, LOW);\n        Serial.println(\"OFF\");\n      }\n\n      delay(500);  //add small delay, you may need to have a bigger delay for button debouncing\n\n    } else {  //do nothing because finger is still on button\n    }\n\n\n\n    prevbutton1State = currentbutton1State;  //update button1 state\n  }\n  //button has not been pressed, it will be high\n  else {\n\n    currentbutton1State = false;\n    prevbutton1State = currentbutton1State;  //update button1 state\n  }\n\n\n\n}  //END LOOP\n</code></pre>"},{"location":"single_page/#what-you-should-see_1","title":"What You Should See","text":"<p>Once the code has uploaded, disconnect the USB cable from the IoT RedBoard - ESP32. Then insert the barrel jack from a power supply to the MOSFET Power Switch and Buck Regulator's barrel jack connector. In this case, we used a 12V wall adapter power supply.</p> <p>The load will be powered on as soon as the button is pressed. Releasing and pressing the button again will turn the load off. The built-in LED will light up every time the load is turned on. Of course, there is also a built-in LED on the MOSFET Power Switch and Buck Regulator that will light up whenever power is applied to the load as well. If necessary, disconnect the 3.3V jumper wire from the IoT RedBoard - ESP32, reconnect the USB cable, and open the Arduino Serial Monitor at 115200 baud for debugging purposes.</p> <p>Even though this example used a button to toggle a latching solenoid, you can also use this example to control a DC motor or 12V LED! You can also try using the Qwiic RFID with an RFID tag instead of a button to turn the solenoid on. Just make sure to adjust the example code should you decide to use something else other than a button to contorl your load.</p>"},{"location":"single_page/#example-3-fading","title":"Example 3: Fading","text":"<p>In this example, we will slowly turn on the load and then slowly turn it off using the N-channel MOSFET. This example is better with a DC motor and 12V LED. You will typically want the solenoid to be fully turned on/off.</p>"},{"location":"single_page/#parts-needed_2","title":"Parts Needed","text":"<p>Grab the following quantities of each part listed to build this circuit:</p> <ul> <li>1x SparkFun IoT RedBoard - ESP32 Development Board</li> <li>1x USB-C Cable</li> <li>3x SparkFun MOSFET Power Switch and Buck Regulator (Low-Side)</li> <li>1x SparkFun Mini Screwdriver</li> <li>3x M/M Jumper Wires</li> <li>1x 12V RGB LED Strip</li> <li>1x 12V Wall Adapter Power Supply</li> </ul>"},{"location":"single_page/#hardware-hookup_3","title":"Hardware Hookup","text":"<p>You will need to connect everything as explained earlier. For this particular example, we will use one channel from a 12V RGB LED strip as shown in the circuit diagram below.</p> <p>Note</p> <p>Notice that we are using pin 16 to fade the red channel instead of pin 25 on the IoT RedBoard - ESP32.</p> <p>Your setup should look similar to the image below without the power supply.</p>"},{"location":"single_page/#upload-code_2","title":"Upload Code","text":"<p>To upload code, insert the USB cable into the IoT RedBoard - ESP32.</p> <p>Note</p> <p>This example is similar to the built-in Arduino example. From the menu, select the following: File &gt; Examples &gt; 03.Analog &gt; Fading. You will need to modify the defined pin with a PWM pin for your microcontroller. Note that the logic is reversed due to the transistor.</p> <p>Copy the following code and paste it in the Arduino IDE. If you have not already, select your Board (in this case, the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button.</p> <pre><code>/******************************************************************************\n      Example 3: Fading\n      Modified By: Ho Yun \"Bobby\" Chan\n      SparkFun Electronics\n      Date: October 27th, 2023\n      License: MIT. See license file for more information but you can\n      basically do whatever you want with this code.\n\n      This example is based on Arduino's fade example. It has been modified\n      so that it can be used for the SparkFun IoT RedBoard- ESP32 but it can be\n      used with any Arduino that has a PWM pin. The load (DC motor,\n      or 12V LED) will slowly turn on and off. This code will be more useful for\n      users connecting a DC motor or nonaddressable LED so that you can partially\n      turn on/off the load.\n\n      Users can also open the Serial Monitor at 115200 to check on\n      the status of the button for debugging.\n\n      Feel like supporting open source hardware?\n      Buy a board or component from SparkFun!\n\n          SparkFun MOSFET Power Switch and Buck Regulator (Low-Side): https://www.sparkfun.com/products/23979\n          SparkFun IoT RedBoard - ESP32 Development Board:            https://www.sparkfun.com/products/19177\n          Hobby Motor - Gear:                                         https://www.sparkfun.com/products/11696\n          Blower - Squirrel Cage (12V):                               https://www.sparkfun.com/products/11270\n          12V LED RGB Strip - Bare (1m):                              https://www.sparkfun.com/products/12021\n          Wall Adapter 12V/600mA, (Barrel Jack):                      https://www.sparkfun.com/products/15313\n\n      Distributed as-is; no warranty is given.\n    ******************************************************************************/\n\nint loadPin = 16;\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n\n  //Initialize Serial for Debugging if there is no built-in LED\n  Serial.begin(115200);\n  Serial.println(\"Analog fade in and out to slowly turn on/off load!\");\n\n  // Set up the load pin to be an output and turn it off:\n  pinMode(loadPin, OUTPUT);\n  analogWrite(loadPin, 255);\n\n  Serial.println(\"OFF\");\n\n}  //END SETUP\n\n\n\n// the loop function runs over and over again forever\nvoid loop() {\n\n  Serial.println(\"&lt;===== FADE IN =====&gt;\");\n  // fade in from min to max in increments of 5 points:\n  for (int fadeValue = 255; fadeValue &gt;= 0; fadeValue -= 5) {\n    // sets the value (range from 0 to 255):\n    analogWrite(loadPin, fadeValue);\n    // wait for 30 milliseconds to see the dimming effect\n    delay(30);\n\n    Serial.println(fadeValue);\n  }\n\n  Serial.println(\"&lt;===== FADE OUT =====&gt;\");\n  // fade out from max to min in increments of 5 points:\n  for (int fadeValue = 0; fadeValue &lt;= 255; fadeValue += 5) {\n    // sets the value (range from 0 to 255):\n    analogWrite(loadPin, fadeValue);\n    // wait for 30 milliseconds to see the dimming effect\n    delay(30);\n\n    Serial.println(fadeValue);\n  }\n\n}  //END LOOP\n</code></pre>"},{"location":"single_page/#what-you-should-see_2","title":"What You Should See","text":"<p>Once the code has uploaded, disconnect the USB cable from the IoT RedBoard - ESP32. Then insert the barrel jack from a power supply to the MOSFET Power Switch and Buck Regulator's barrel jack connector. In this case, we used a 12V wall adapter power supply.</p> <p>The load will slowly turn on and slowly turn off. This will loop forever until power is removed from the board. If necessary, disconnect the 3.3V jumper wire from the IoT RedBoard - ESP32, reconnect the USB cable, and open the Arduino Serial Monitor at 115200 baud for debugging purposes.</p> <p>While this example was used to turn on one channel of a 12V RGB LED strip, you could also use this example with a DC motor. Try using a potentiometer (or any 3.3V analog sensor) with the <code>map()</code> function to adjust the speed of the motor.</p>"},{"location":"single_page/#example-4-12v-rgb-led-strip","title":"Example 4: 12V RGB LED Strip","text":"<p>In this example, we will control all three channels of the RGB LED strip. Since we've already hooked up a 12V RGB LED strip before, we will also a circuit with a potentiometer to cycle between each color and a photoresistor to turn on the LEDs whenever the light is below a certain light level. The following example code is based on the SparkFun Inventor's Kit v4.1 Night Light example.</p> <ul> <li> <p> </p> <p> Non-Addressable RGB LED Strip Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Inventor's Kit Experiment Guide - v4.1 | Circuit 1D: RGB Night-Light </p> </li> </ul>"},{"location":"single_page/#parts-needed_3","title":"Parts Needed","text":"<p>Grab the following quantities of each part listed to build this circuit:</p> <ul> <li>1x SparkFun IoT RedBoard - ESP32 Development Board</li> <li>1x USB-C Cable</li> <li>3x SparkFun MOSFET Power Switch and Buck Regulator (Low-Side)</li> <li>1x SparkFun Mini Screwdriver</li> <li>19x M/M Jumper Wires*</li> <li>1x Breadboard</li> <li>1x 10k\u03a9 Potentiometer with Knob</li> <li>1x Mini Photocell</li> <li>1x 10k\u03a9 Resistor</li> <li>1x 12V RGB LED Strip</li> <li>1x DC Barrel Jack Adapter - Male</li> <li>3x DC Barrel Jack Adapter - Female</li> <li>1x 12V Wall Adapter</li> </ul> <p>* Note</p> <p>You will need a minimum of 19x M/M jumper wires. Six jumper wires were stripped wires that connect the barrel jacks together for power and reference ground.</p>"},{"location":"single_page/#hardware-hookup_4","title":"Hardware Hookup","text":"<p>For this particular example, we will use three channels from a 12V RGB LED strip while also including a similar circuit from the SparkFun Inventor's Kit v4.1. The circuit diagram is shown below.</p> <p>Note</p> <p>When testing the non-addressable LED strip, the pin labeled \"G\" was actually blue and the \"B\" was actually green. Depending on the manufacturer, the label may vary. Try testing the LED strip out with a power supply to determine if the letter represents the color.</p> <p>Keep in mind that instead of the RedBoard with ATmega328P, we are using the IoT RedBoard with ESP32. Since the hardware is different, the following code was modified:</p> <pre><code>- analog and PWM pins were redefined in the example code\n- threshold was modified due to the ADC's higher resolution\n- logic is reversed due to the transistors\n</code></pre> <p>Danger</p> <p>The IoT RedBoard with ESP32 has a system voltage of 3.3V. Thus, the logic levels is 3.3V instead of 5V on the RedBoard with ATmega328P. Thus, the analog reference voltage for the potentiometer and photoresistor is 3.3V. Make sure you are using 3.3V!</p> <p>Your setup should look similar to the image below without the power supply.</p>"},{"location":"single_page/#upload-code_3","title":"Upload Code","text":"<p>To upload code, insert the USB cable into the IoT RedBoard - ESP32.</p> <p>Copy the following code and paste it in the Arduino IDE. If you have not already, select your Board (in this case, the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button.</p> <pre><code>/*\n  12V RGB LED Nightlight Example\n\n  Turns an 12V RGB strip LED on or off based on the light level read by a photoresistor.\n  Change colors by turning the potentiometer. This example is based off the SparkFun\n  Inventor's Kit v4.2 RGB Night-Light Example:\n\n      https://learn.sparkfun.com/tutorials/sparkfun-inventors-kit-experiment-guide---v41\n\n  Note that instead of the RedBoard with ATmega328P, we are using the IoT RedBoard with ESP32.\n  Since the hardware is different, the following code was modified:\n\n      - analog and PWM pins were redifined\n      - threshold was modified due to the ADC's higher resolution\n      - logic is reversed due to the transistors\n\n  WARNING: Since the IoT RedBoard with ESP32 has a system voltage of 3.3V, the logic levels\n  is 3.3V instead of 5V on the RedBoard with ATmega328P. Thus, the analog reference voltage\n  for the potentiometer and photoresistor is 3.3V. Make sure you are using 3.3V!\n\n  This sketch was written by SparkFun Electronics, with lots of help from the Arduino community.\n  This code is completely free for any use.\n\n*/\n\nint photoresistor = A4;          //variable for storing the photoresistor value\nint potentiometer = A5;          //this variable will hold a value based on the position of the knob\nint threshold = 3000;            //if the photoresistor reading is lower than this value the light will turn on\n                                 /*Note: The ESP32's ADC resolution is bigger. The max is 4095. In a bright room\n                                 with your finger covering the sensor, the threshold was about 3000. In a dimly\n                                 lit room, the threshold was about 1000. You will need to adjust this value when\n                                 installing it in a room. Just make sure to make it a little more than the thresholed\n                                 of the room. Try adding a button and some code  to save the threshold value! */\n\n//LEDs are connected to these pins\nint RedPin = 16;\nint GreenPin = 17;\nint BluePin = 25;\n\nvoid setup() {\n  Serial.begin(115200);           //start a serial connection with the computer\n  Serial.println(\"12V RGB LED Strip Nightlight!\");\n\n  //set the LED pins to output\n  pinMode(RedPin, OUTPUT);\n  pinMode(GreenPin, OUTPUT);\n  pinMode(BluePin, OUTPUT);\n\n} //END SETUP\n\nvoid loop() {\n\n  photoresistor = analogRead(A4);         //read the value of the photoresistor\n  potentiometer = analogRead(A5);         //read the value of the potentiometer\n\n  Serial.print(\"Photoresistor value:\");\n  Serial.print(photoresistor);          //print the photoresistor value to the serial monitor\n  Serial.print(\"  Potentiometer value:\");\n  Serial.println(potentiometer);          //print the potentiometer value to the serial monitor\n\n  if (photoresistor &lt; threshold) {        //if it's dark (the photoresistor value is below the threshold) turn the LED on\n    //These nested if statements check for a variety of ranges and\n    //call different functions based on the current potentiometer value.\n    //Those functions are found at the bottom of the sketch.\n\n    /*Note: We divided 4095 by 7 colors and had a window of about 585. For users\n            Adding more colors, try dividing 4095 by the total number and adjust\n            eac condition statement*/\n\n    if (potentiometer &gt; 0 &amp;&amp; potentiometer &lt;= 585)\n      red();\n    if (potentiometer &gt; 585 &amp;&amp; potentiometer &lt;= 1170)\n      orange();\n    if (potentiometer &gt; 1170 &amp;&amp; potentiometer &lt;= 1755)\n      yellow();\n    if (potentiometer &gt; 1755 &amp;&amp; potentiometer &lt;= 2340)\n      green();\n    if (potentiometer &gt; 2340 &amp;&amp; potentiometer &lt;= 2925)\n      cyan();\n    if (potentiometer &gt; 2925 &amp;&amp; potentiometer &lt;= 3510)\n      blue();\n    if (potentiometer &gt; 3510)\n      magenta();\n  }\n  else {                                //if it isn't dark turn the LED off\n\n    turnOff();                            //call the turn off function\n\n  }\n\n  delay(100);                             //short delay so that the printout is easier to read\n\n} //END LOOP\n\nvoid red () {\n\n  //set the LED pins to values that make red\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 255);\n  analogWrite(BluePin, 255);\n}\nvoid orange () {\n\n  //set the LED pins to values that make orange\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 128);\n  analogWrite(BluePin, 255);\n}\nvoid yellow () {\n\n  //set the LED pins to values that make yellow\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 255);\n}\nvoid green () {\n\n  //set the LED pins to values that make green\n  analogWrite(RedPin, 255);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 255);\n}\nvoid cyan () {\n\n  //set the LED pins to values that make cyan\n  analogWrite(RedPin, 255);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}\nvoid blue () {\n\n  //set the LED pins to values that make blue\n  analogWrite(RedPin, 255);\n  analogWrite(GreenPin, 255);\n  analogWrite(BluePin, 0);\n}\nvoid magenta () {\n\n  //set the LED pins to values that make magenta\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 255);\n  analogWrite(BluePin, 0);\n}\nvoid turnOff () {\n\n  //set all three LED pins to 0 or OFF\n  analogWrite(RedPin, 255);\n  analogWrite(GreenPin, 255);\n  analogWrite(BluePin, 255);\n}\n</code></pre>"},{"location":"single_page/#what-you-should-see_3","title":"What You Should See","text":"<p>Once the code has uploaded, disconnect the USB cable from the IoT RedBoard - ESP32. Then insert the barrel jack from a power supply to the MOSFET Power Switch and Buck Regulator's barrel jack connector. In this case, we used a 12V wall adapter power supply.</p> <p>The MOSFET Power Switch &amp; Buck Regulator with the wall adapter. Cover the photoresistor with your finger (or just turn off the lights in the room) and turn the potentiometer. You should notice the colors cycling through as the potentiometer is within certain ranges. You will probably want to disconnect the 3.3V jumper wire from the IoT RedBoard - ESP32, reconnect the USB cable, and open the Arduino Serial Monitor at 115200 baud for debugging purposes. That way you can view the serial data and adjust the threshold value based on the lighting in the room.</p> <p>Now that we have ported the example from the RedBoard Qwiic with an ATmega328P to the RedBoard IoT Development Board - ESP32, try adjusting the condition statement with the potentiometer to add additional colors. Or even writing some code save the threshold value whenever a button is pressed down. You can also try to take advantage of the ESP32's wireless capabilities and adjust the color of the LED strip based on the weather.</p>"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":""},{"location":"single_page/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"single_page/#resources","title":"Resources","text":"<p>Now that you've successfully got your SparkFun MOSFET Power Switch and Buck Regulator (Low-Side) up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Datasheet<ul> <li>LMR14203 (PDF)</li> <li>PSMN7R0-100BS (PDF)</li> </ul> </li> <li>GitHub Hardware Repo</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"github/contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun MOSFET Power Switch and Buck Regulator (Low-Side) repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun MOSFET Power Switch and Buck Regulator (Low-Side) repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun MOSFET Power Switch and Buck Regulator (Low-Side) repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun MOSFET Power Switch and Buck Regulator (Low-Side) repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"}]}